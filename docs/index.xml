<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on Bleve</title>
    <link>https://blevesearch.com/docs/</link>
    <description>Recent content in Docs on Bleve</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2025 &lt;a href=&#34;http://couchbase.com/&#34;&gt;Couchbase, Inc.&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 21 Sep 2016 10:25:38 -0400</lastBuildDate>
    <atom:link href="https://blevesearch.com/docs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Index Aliases</title>
      <link>https://blevesearch.com/docs/IndexAlias/</link>
      <pubDate>Wed, 21 Sep 2016 10:25:38 -0400</pubDate>
      
      <guid>https://blevesearch.com/docs/IndexAlias/</guid>
      <description>

&lt;p&gt;Bleve has a powerful feature called an &lt;code&gt;IndexAlias&lt;/code&gt;.  The IndexAlias can be used to search an index, with the additional ability to atomically switch the underlying physical index.  IndexAliases can also be used to search across multiple indexes at the same time and correctly merge the results.&lt;/p&gt;

&lt;h3 id=&#34;indexalias-interface:6dfd36eb1af3597f02acd82624b49c37&#34;&gt;IndexAlias Interface&lt;/h3&gt;

&lt;p&gt;First, its useful to note that thanks to Go interfaces, an IndexAlias is also an Index.  This means that in general you work with an IndexAlias just as you would work with an Index.  The alias concept also adds 3 methods:  Add(), Remove(), and Swap()&lt;/p&gt;

&lt;p&gt;Add, will add one or more indexes to the alias.
Remove will remove one or more indexes from the alias.
Swap will atomically add/remove the provided indexes.  (all other ops, like search will see the alias before or after all adds/removes are done)&lt;/p&gt;

&lt;h3 id=&#34;switching-indexes-with-zero-downtime:6dfd36eb1af3597f02acd82624b49c37&#34;&gt;Switching Indexes with Zero Downtime&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Create a new Index&lt;/li&gt;
&lt;li&gt;Create an IndexAlias pointing to the Index&lt;/li&gt;
&lt;li&gt;Write your application to query the IndexAlias&lt;/li&gt;
&lt;li&gt;&amp;hellip;At some later time, create a new Index&lt;/li&gt;
&lt;li&gt;Call Swap() on the IndexAlias passing in the new Index&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Your application will safely switch to searching the new index.&lt;/p&gt;

&lt;h3 id=&#34;searching-across-multiple-indexes:6dfd36eb1af3597f02acd82624b49c37&#34;&gt;Searching Across Multiple Indexes&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Create more than one Index&lt;/li&gt;
&lt;li&gt;Create the IndexAlias pointing to these indexes&lt;/li&gt;
&lt;li&gt;Write your application to invoke Search() on the IndexAlias&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Your application will search across all the underlying indexes at the same time, and the results will be merged together into a single result.&lt;/p&gt;

&lt;h4 id=&#34;limitations:6dfd36eb1af3597f02acd82624b49c37&#34;&gt;Limitations&lt;/h4&gt;

&lt;p&gt;When and IndexAlias points to multiple indexes not all operations are supported.  Only operations which can be invoked on all the child indexes and have their responses aggregated are supported.  Operations that are not supported return &lt;code&gt;bleve.ErrorAliasMulti&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sorting</title>
      <link>https://blevesearch.com/docs/Sorting/</link>
      <pubDate>Wed, 21 Sep 2016 10:25:38 -0400</pubDate>
      
      <guid>https://blevesearch.com/docs/Sorting/</guid>
      <description>

&lt;p&gt;Bleve now gives you the ability to customize the order of your search results.&lt;/p&gt;

&lt;p&gt;The default behavior is to sort results by relevance, with the highest scoring results first.&lt;/p&gt;

&lt;h3 id=&#34;simple-api:fe8eddd7d5918bd09eccd8eff0078748&#34;&gt;Simple API&lt;/h3&gt;

&lt;p&gt;The simple API adds a &lt;code&gt;SortBy()&lt;/code&gt; method to the SearchRequest.  Here is an example which sorts by the field &lt;code&gt;age&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;searchRequest.SortBy([]string{&amp;quot;age&amp;quot;})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The argument is an array of strings.  Each string refers to the name of a field.  The names of fields can be prefixed with the &lt;code&gt;-&lt;/code&gt; character, which will cause that field to be reversed (descending order).  Items will first be sorted by the first field.  Any items with the same value for that field, are then also sorted by the next field, and so on.  All fields in the sort order &lt;strong&gt;MUST&lt;/strong&gt; be indexed.&lt;/p&gt;

&lt;p&gt;There are two special fields defined for use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_id&lt;/code&gt; - refers to the document identifier&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_score&lt;/code&gt; - refers to the relevance score computed by Bleve&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is a more complex example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;searchRequest.SortBy([]string{&amp;quot;age&amp;quot;, &amp;quot;-_score&amp;quot;, &amp;quot;_id&amp;quot;})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will first sort results by the &amp;ldquo;age&amp;rdquo; field.  If two documents have the same value for this field, they will then be sorted by the score descending, finally, if documents have the same age and score, they will be sorted by document ID ascending.&lt;/p&gt;

&lt;h3 id=&#34;advanced-api:fe8eddd7d5918bd09eccd8eff0078748&#34;&gt;Advanced API&lt;/h3&gt;

&lt;p&gt;The simple API works for most cases, but there are some which require the advanced API.  In these cases you must import the bleve &lt;code&gt;search&lt;/code&gt; sub-package, and build a &lt;code&gt;search.SortOrder&lt;/code&gt; object.  This is a slice of &lt;code&gt;search.SearchSort&lt;/code&gt; objects.  Today there are three implementations available, SortField, SortScore, and SortDocID.&lt;/p&gt;

&lt;p&gt;By building these structures manually, you can avoid ambiguities and limitations of the simple API.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sort by fields which happen to start with &lt;code&gt;-&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Sort by fields which happen to conflict with &lt;code&gt;_id&lt;/code&gt; or &lt;code&gt;_score&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Control whether documents missing a field value should sort first or last&lt;/li&gt;
&lt;li&gt;Control which value for multi-value fields should be used for sorting&lt;/li&gt;
&lt;li&gt;Force handling field values as a particular type (defaults to auto)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using blevex packages</title>
      <link>https://blevesearch.com/docs/Blevex/</link>
      <pubDate>Wed, 21 Sep 2016 10:25:38 -0400</pubDate>
      
      <guid>https://blevesearch.com/docs/Blevex/</guid>
      <description>

&lt;p&gt;The &lt;a href=&#34;https://github.com/blevesearch/blevex&#34;&gt;blevex&lt;/a&gt; repository contains optional add-ons to bleve which cannot be a part of the main repository for the following reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C dependency&lt;/li&gt;
&lt;li&gt;Does not fully satisfy interface contracts&lt;/li&gt;
&lt;li&gt;Experimental in nature&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;using-blevex-packages:34a97ce3c17c3c82af8fae1291afb5f9&#34;&gt;Using blevex packages&lt;/h3&gt;

&lt;p&gt;Bleve does not directly import any of the sub-packages with the blevex repository.  If your application would like to use one of these packages, they should import the package directly.&lt;/p&gt;

&lt;h3 id=&#34;kv-stores:34a97ce3c17c3c82af8fae1291afb5f9&#34;&gt;KV Stores&lt;/h3&gt;

&lt;h4 id=&#34;cznicb:34a97ce3c17c3c82af8fae1291afb5f9&#34;&gt;cznicb&lt;/h4&gt;

&lt;p&gt;Bleve supports using &lt;a href=&#34;https://github.com/cznic/b&#34;&gt;cznic/b&lt;/a&gt; as a KVStore implementation.  Although this implementation is pure Go, it does not offer reader isolation, so it does not fully satisfy the bleve interface requirements.  Under certain restrictions it can still be used safely.&lt;/p&gt;

&lt;h4 id=&#34;leveldb:34a97ce3c17c3c82af8fae1291afb5f9&#34;&gt;leveldb&lt;/h4&gt;

&lt;p&gt;Bleve supports using &lt;a href=&#34;https://code.google.com/p/leveldb/&#34;&gt;LevelDB&lt;/a&gt; as a KVStore implementation.  This requires a C/C++ dependency, please see &lt;a href=&#34;https://blevesearch.com/docs/Building/&#34;&gt;Building&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;rocksdb:34a97ce3c17c3c82af8fae1291afb5f9&#34;&gt;rocksdb&lt;/h4&gt;

&lt;p&gt;Bleve supports using &lt;a href=&#34;https://github.com/facebook/rocksdb&#34;&gt;RocksDB&lt;/a&gt; as a KVStore implementation.  This requires a C/C++ dependency, please see &lt;a href=&#34;https://blevesearch.com/docs/Building/&#34;&gt;Building&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;tokenizers:34a97ce3c17c3c82af8fae1291afb5f9&#34;&gt;Tokenizers&lt;/h3&gt;

&lt;h4 id=&#34;icu:34a97ce3c17c3c82af8fae1291afb5f9&#34;&gt;ICU&lt;/h4&gt;

&lt;p&gt;Bleve supports using the &lt;a href=&#34;http://site.icu-project.org/&#34;&gt;ICU&lt;/a&gt; project to tokenize words.  For most languages Bleve&amp;rsquo;s built-in unicode segmentation will work fine.  However, languages which require dictionary-based segmentation may still require this library.  This requires a C/C++ dependency, please see &lt;a href=&#34;https://blevesearch.com/docs/Building/&#34;&gt;Building&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;NOTE: It is recommended to get the most recent version of ICU possible.  Older versions often included with distributions do not support language based tokenization.&lt;/p&gt;

&lt;h3 id=&#34;token-filters:34a97ce3c17c3c82af8fae1291afb5f9&#34;&gt;Token Filters&lt;/h3&gt;

&lt;h4 id=&#34;stemmer-filter:34a97ce3c17c3c82af8fae1291afb5f9&#34;&gt;stemmer_filter&lt;/h4&gt;

&lt;p&gt;Bleve supports using the &lt;a href=&#34;http://snowball.tartarus.org/download.php&#34;&gt;libstemmer&lt;/a&gt; library to stem words for many languages.  Many of the language specific analyzers depend on this library.  This requires a C/C++ dependency, please see &lt;a href=&#34;https://blevesearch.com/docs/Building/&#34;&gt;Building&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Analyzers</title>
      <link>https://blevesearch.com/docs/Analyzers/</link>
      <pubDate>Tue, 23 Jun 2015 10:25:38 -0400</pubDate>
      
      <guid>https://blevesearch.com/docs/Analyzers/</guid>
      <description>

&lt;h2 id=&#34;general-purpose-analyzers:aa66feb1a6a343065211b619ad078082&#34;&gt;General Purpose Analyzers&lt;/h2&gt;

&lt;h3 id=&#34;keyword:aa66feb1a6a343065211b619ad078082&#34;&gt;Keyword&lt;/h3&gt;

&lt;p&gt;The Keyword Analyzer does not perform any analysis on the input text.  It creates a single token representing the entire input.  This is useful for fields where you only want exact matches.  For example, a field containing keywords or tags that may contain spaces that another analyzer might interpret as token boundaries.&lt;/p&gt;

&lt;h3 id=&#34;simple:aa66feb1a6a343065211b619ad078082&#34;&gt;Simple&lt;/h3&gt;

&lt;p&gt;The simple analyzer performs only minimal analysis on the input.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tokenizer - &lt;a href=&#34;https://blevesearch.com/docs/Tokenizers/#letter:7d5ef314ed49959990583aa48ce5f86b&#34;&gt;Letter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Token Filters

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blevesearch.com/docs/Token-Filters/#lowercase:c38efc402d8771527a225c32b59be157&#34;&gt;Lowercase&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;standard:aa66feb1a6a343065211b619ad078082&#34;&gt;Standard&lt;/h3&gt;

&lt;p&gt;The Standard Analyzer is like the Simple Analyzer but also adds English stop word removal.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tokenizer - &lt;a href=&#34;https://blevesearch.com/docs/Tokenizers/#unicode:7d5ef314ed49959990583aa48ce5f86b&#34;&gt;Unicode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Token Filters

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blevesearch.com/docs/Token-Filters/#lowercase:c38efc402d8771527a225c32b59be157&#34;&gt;Lowercase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;English &lt;a href=&#34;https://blevesearch.com/docs/Token-Filters/#stop-token:c38efc402d8771527a225c32b59be157&#34;&gt;Stop Token&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;detect-language:aa66feb1a6a343065211b619ad078082&#34;&gt;Detect Language&lt;/h3&gt;

&lt;p&gt;The Detect Language Analyzer is used to examine input text, use heuristics to determine a best guess at the language, and index the ISO 639 Language Code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tokenizer - &lt;a href=&#34;https://blevesearch.com/docs/Tokenizers/#single-token:7d5ef314ed49959990583aa48ce5f86b&#34;&gt;Single&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Token Filters

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blevesearch.com/docs/Token-Filters/#lowercase:c38efc402d8771527a225c32b59be157&#34;&gt;Lowercase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blevesearch.com/docs/Token-Filters/#cld2:c38efc402d8771527a225c32b59be157&#34;&gt;CLD2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;language-specific-analyzers:aa66feb1a6a343065211b619ad078082&#34;&gt;Language Specific Analyzers&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Danish&lt;/li&gt;
&lt;li&gt;Dutch&lt;/li&gt;
&lt;li&gt;English&lt;/li&gt;
&lt;li&gt;Finnish&lt;/li&gt;
&lt;li&gt;French&lt;/li&gt;
&lt;li&gt;Hungarian&lt;/li&gt;
&lt;li&gt;Italian&lt;/li&gt;
&lt;li&gt;German&lt;/li&gt;
&lt;li&gt;Norwegian&lt;/li&gt;
&lt;li&gt;Persian&lt;/li&gt;
&lt;li&gt;Portuguese&lt;/li&gt;
&lt;li&gt;Romanian&lt;/li&gt;
&lt;li&gt;Russian&lt;/li&gt;
&lt;li&gt;Sorani&lt;/li&gt;
&lt;li&gt;Spanish&lt;/li&gt;
&lt;li&gt;Swedish&lt;/li&gt;
&lt;li&gt;Thai&lt;/li&gt;
&lt;li&gt;Turkish&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Applications Using Bleve</title>
      <link>https://blevesearch.com/docs/Applications-using-bleve/</link>
      <pubDate>Tue, 23 Jun 2015 10:25:38 -0400</pubDate>
      
      <guid>https://blevesearch.com/docs/Applications-using-bleve/</guid>
      <description>

&lt;p&gt;The following applications use bleve.  Add yours to the list!&lt;/p&gt;

&lt;h2 id=&#34;caddy:640b2c4c13c05d4abaa6d9659bc2b04d&#34;&gt;Caddy&lt;/h2&gt;

&lt;p&gt;Caddy is an alternative web server that is easy to configure and use.  Caddy uses Bleve to automatically index your site and expose a search page and JSON endpoint.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://caddyserver.com/docs/search&#34;&gt;https://caddyserver.com/docs/search&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;cbft:640b2c4c13c05d4abaa6d9659bc2b04d&#34;&gt;cbft&lt;/h2&gt;

&lt;p&gt;Full-text searches of Couchbase Server, powered by bleve.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/couchbaselabs/cbft&#34;&gt;https://github.com/couchbaselabs/cbft&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;docker-bleve-wiki-indexer:640b2c4c13c05d4abaa6d9659bc2b04d&#34;&gt;docker bleve wiki indexer&lt;/h2&gt;

&lt;p&gt;Dockerizing the bleve library to search the bleve wiki.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/lgs/docker-bleve-wiki-indexer&#34;&gt;https://github.com/lgs/docker-bleve-wiki-indexer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;goin:640b2c4c13c05d4abaa6d9659bc2b04d&#34;&gt;goin&lt;/h2&gt;

&lt;p&gt;A full text search indexer for your files on disk.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://bitbucket.org/zaphar/goin&#34;&gt;https://bitbucket.org/zaphar/goin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;tpb-search:640b2c4c13c05d4abaa6d9659bc2b04d&#34;&gt;tpb-search&lt;/h2&gt;

&lt;p&gt;Locally index and search database dumps from &lt;a href=&#34;https://openbay.isohunt.to&#34;&gt;https://openbay.isohunt.to&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/peterhellberg/tpb-search&#34;&gt;https://github.com/peterhellberg/tpb-search&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ekanite:640b2c4c13c05d4abaa6d9659bc2b04d&#34;&gt;Ekanite&lt;/h2&gt;

&lt;p&gt;A Syslog server with built-in search for received log messages.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ekanite/ekanite&#34;&gt;https://github.com/ekanite/ekanite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;blast:640b2c4c13c05d4abaa6d9659bc2b04d&#34;&gt;Blast&lt;/h2&gt;

&lt;p&gt;Blast is a search and indexing server built on Bleve. Makes it easy to bring up high-availability cluster with Raft consensus algorithm.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mosuka/blast&#34;&gt;https://github.com/mosuka/blast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Building</title>
      <link>https://blevesearch.com/docs/Building/</link>
      <pubDate>Tue, 23 Jun 2015 10:25:38 -0400</pubDate>
      
      <guid>https://blevesearch.com/docs/Building/</guid>
      <description>

&lt;h2 id=&#34;the-instructions-on-this-page-are-no-longer-applicable-to-bleve-v2:140c58546f80295ba58ab4d2981832fc&#34;&gt;The instructions on this page are no longer applicable to bleve v2&lt;/h2&gt;

&lt;p&gt;Some of the &lt;a href=&#34;https://blevesearch.com/docs/Blevex/&#34;&gt;blevex&lt;/a&gt; packages require C/C++ libraries.&lt;/p&gt;

&lt;p&gt;In general, bleve expects these libraries to be built and installed in the standard system locations.  If not, it is up to you to set the appropriate CGO_&amp;hellip; environment variables so that the libraries and headers can be found.&lt;/p&gt;

&lt;h2 id=&#34;platform-specific-instructions:140c58546f80295ba58ab4d2981832fc&#34;&gt;Platform Specific Instructions&lt;/h2&gt;

&lt;p&gt;The following sections are user-contributed instructions for satisfying dependencies on particular platforms.&lt;/p&gt;

&lt;h3 id=&#34;ubuntu-14-04-lts-trusty-tahr:140c58546f80295ba58ab4d2981832fc&#34;&gt;Ubuntu 14.04 LTS (Trusty Tahr)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install libleveldb-dev libstemmer-dev libicu-dev svn build-essential
$ go get -u -v  github.com/blevesearch/bleve
$ cd $GOPATH/src/github.com/blevesearch/bleve/analysis/token_filters/cld2
$ svn co http://cld2.googlecode.com/svn/trunk cld2-read-only
$ cd cld2-read-only/internal/
$ ./compile_libs.sh
$ sudo cp *.so /usr/local/lib
$ go get -u -v -tags full github.com/blevesearch/bleve
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;os-x-hacky-but-similar-to-ubuntu-14-04:140c58546f80295ba58ab4d2981832fc&#34;&gt;OS X (hacky, but similar to Ubuntu 14.04)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ brew install leveldb icu4c svn # etc?
$ export CGO_LDFLAGS=-L/usr/local/opt/icu4c/lib
$  export CGO_CFLAGS=-I/usr/local/opt/icu4c/include
$ go get -u -v  github.com/blevesearch/bleve
$ cd $GOPATH/src/github.com/blevesearch/bleve/analysis/token_filters/cld2
$ svn co http://cld2.googlecode.com/svn/trunk cld2-read-only
$ cd cld2-read-only/internal/
# if you feel gutsy run:
$ perl -p -i -e &#39;s/soname=/install_name,/&#39; compile_libs.sh
# otherwise, just change soname= to install_name, in the two spots in compile_libs.sh
$ ./compile_libs.sh
$ sudo cp *.so /usr/local/lib
$ go get -u -v -tags full github.com/blevesearch/bleve
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Character Filters</title>
      <link>https://blevesearch.com/docs/Character-Filters/</link>
      <pubDate>Tue, 23 Jun 2015 10:25:38 -0400</pubDate>
      
      <guid>https://blevesearch.com/docs/Character-Filters/</guid>
      <description>

&lt;h3 id=&#34;regular-expression:332c3eea69ab462e14d779b7c7983cd1&#34;&gt;Regular Expression&lt;/h3&gt;

&lt;p&gt;The regular expression character filter is configured with a regular expression and a replacement array of bytes.  All sequences of characters matching the regular expression are replaced with the replacement bytes.&lt;/p&gt;

&lt;p&gt;Typically, characters that are undesirable for indexing are replaced with whitespace.  This allows the original byte offsets in the original input to remain unaffected.&lt;/p&gt;

&lt;h3 id=&#34;html:332c3eea69ab462e14d779b7c7983cd1&#34;&gt;HTML&lt;/h3&gt;

&lt;p&gt;The html character filter attempts to identify HTML tags from the input text and replace them with spaces.  The current implementation is an instance of the Regular Expression character filter.&lt;/p&gt;

&lt;h3 id=&#34;zero-width-non-joiner:332c3eea69ab462e14d779b7c7983cd1&#34;&gt;Zero-width Non-Joiner&lt;/h3&gt;

&lt;p&gt;The zero-width non-joiner character filter replaces zero-width non-joiner characters with a space.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Command-line Utility</title>
      <link>https://blevesearch.com/docs/bleve/</link>
      <pubDate>Tue, 23 Jun 2015 10:25:38 -0400</pubDate>
      
      <guid>https://blevesearch.com/docs/bleve/</guid>
      <description>

&lt;h2 id=&#34;bleve:901bef76d75505723a0bdc33b9d82adb&#34;&gt;bleve&lt;/h2&gt;

&lt;p&gt;command-line tool to interact with a bleve index&lt;/p&gt;

&lt;h3 id=&#34;synopsis:901bef76d75505723a0bdc33b9d82adb&#34;&gt;Synopsis&lt;/h3&gt;

&lt;p&gt;Bleve is a command-line tool to interact with a bleve index.&lt;/p&gt;

&lt;h3 id=&#34;see-also:901bef76d75505723a0bdc33b9d82adb&#34;&gt;SEE ALSO&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blevesearch.com/docs/bleve_bulk/&#34;&gt;bleve bulk&lt;/a&gt;  - bulk loads from newline delimited JSON files&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blevesearch.com/docs/bleve_count/&#34;&gt;bleve count&lt;/a&gt;     - counts the number documents in the index&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blevesearch.com/docs/bleve_create/&#34;&gt;bleve create&lt;/a&gt;    - creates a new index&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blevesearch.com/docs/bleve_dictionary/&#34;&gt;bleve dictionary&lt;/a&gt;    - prints the term dictionary for the specified field in the index&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blevesearch.com/docs/bleve_dump/&#34;&gt;bleve dump&lt;/a&gt;  - dumps the contents of the index&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blevesearch.com/docs/bleve_fields/&#34;&gt;bleve fields&lt;/a&gt;    - lists the fields in this index&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blevesearch.com/docs/bleve_index/&#34;&gt;bleve index&lt;/a&gt;     - adds the files to the index&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blevesearch.com/docs/bleve_mapping/&#34;&gt;bleve mapping&lt;/a&gt;   - prints the mapping used for this index&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blevesearch.com/docs/bleve_query/&#34;&gt;bleve query&lt;/a&gt;     - queries the index&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blevesearch.com/docs/bleve_registry/&#34;&gt;bleve registry&lt;/a&gt;     - registry lists the bleve components compiled into this executable&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Contributing</title>
      <link>https://blevesearch.com/docs/Contributing/</link>
      <pubDate>Tue, 23 Jun 2015 10:25:38 -0400</pubDate>
      
      <guid>https://blevesearch.com/docs/Contributing/</guid>
      <description>&lt;p&gt;As bleve is a Couchbase project we must require contributors accept the &lt;a href=&#34;http://review.couchbase.org/static/individual_agreement.html&#34;&gt;Couchbase Contributor License Agreement&lt;/a&gt;.  To sign this agreement log into the Couchbase &lt;a href=&#34;http://review.couchbase.org/&#34;&gt;code review tool&lt;/a&gt;.  The bleve project does not use this code review tool but it is still used to track acceptance of the contributor license agreements.&lt;/p&gt;

&lt;p&gt;All types of contributions are welcome, but please keep the following in mind:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If you&amp;rsquo;re planning a large change, you should really discuss it on the &lt;a href=&#34;https://groups.google.com/forum/#!forum/bleve&#34;&gt;google group&lt;/a&gt; first.  This helps avoid duplicate effort and spending time on something that may not be merged.&lt;/li&gt;
&lt;li&gt;Existing tests should continue to pass, new tests for the contribution are nice to have.&lt;/li&gt;
&lt;li&gt;All code should have gone through &lt;code&gt;go fmt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;All code should pass &lt;code&gt;go vet&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Documentation</title>
      <link>https://blevesearch.com/docs/Home/</link>
      <pubDate>Tue, 23 Jun 2015 10:25:38 -0400</pubDate>
      
      <guid>https://blevesearch.com/docs/Home/</guid>
      <description>&lt;p&gt;The Bleve documentation has been divided up into two sections, a User Guide and a Developer Guide.  The User Guide is for developers interested in &lt;em&gt;using&lt;/em&gt; Bleve.  The Developer Guide is for developers interested in contributing to the Bleve project.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Example Applications</title>
      <link>https://blevesearch.com/docs/Example-Applications/</link>
      <pubDate>Tue, 23 Jun 2015 10:25:38 -0400</pubDate>
      
      <guid>https://blevesearch.com/docs/Example-Applications/</guid>
      <description>

&lt;h2 id=&#34;beer-search:041bbca8e3b6a99527383bbff440fe95&#34;&gt;Beer Search&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/blevesearch/beer-search&#34;&gt;beer-search&lt;/a&gt; application shows many of bleve&amp;rsquo;s features by allowing you to index and search beers and breweries.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/blevesearch/beer-search&#34;&gt;Source Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;bleve-explorer:041bbca8e3b6a99527383bbff440fe95&#34;&gt;Bleve Explorer&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/blevesearch/bleve-explorer&#34;&gt;bleve-explorer&lt;/a&gt; application shows how to integrate bleve functionality with an HTTP/REST/JSON interface.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/blevesearch/bleve-explorer&#34;&gt;Source Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=DfbRTXE5n4Y&#34;&gt;Video Introduction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;See also: &lt;a href=&#34;https://blevesearch.com/docs/Applications-using-bleve/&#34;&gt;other applications using bleve&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://blevesearch.com/docs/Getting%20Started/</link>
      <pubDate>Tue, 23 Jun 2015 10:25:38 -0400</pubDate>
      
      <guid>https://blevesearch.com/docs/Getting%20Started/</guid>
      <description>

&lt;p&gt;The simplest way to get started with bleve is to create a new module:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go mod init &amp;lt;your application&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;your-first-bleve-program:fea031cc8a84a77f907665d305d10e43&#34;&gt;Your first bleve program&lt;/h3&gt;

&lt;p&gt;Edit main.go and paste:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;

	&amp;quot;github.com/blevesearch/bleve/v2&amp;quot;
)

func main() {
	// open a new index
	mapping := bleve.NewIndexMapping()
	index, err := bleve.New(&amp;quot;example.bleve&amp;quot;, mapping)
	if err != nil {
		fmt.Println(err)
		return
	}

	data := struct {
		Name string
	}{
		Name: &amp;quot;text&amp;quot;,
	}

	// index some data
	index.Index(&amp;quot;id&amp;quot;, data)

	// search for some text
	query := bleve.NewMatchQuery(&amp;quot;text&amp;quot;)
	search := bleve.NewSearchRequest(query)
	searchResults, err := index.Search(search)
	if err != nil {
		fmt.Println(err)
		return
	}
	fmt.Println(searchResults)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should compile, run, and return one search hit for the item added.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Highlight Matches in Results</title>
      <link>https://blevesearch.com/docs/Highlight%20Matches%20in%20Results/</link>
      <pubDate>Tue, 23 Jun 2015 10:25:38 -0400</pubDate>
      
      <guid>https://blevesearch.com/docs/Highlight%20Matches%20in%20Results/</guid>
      <description>

&lt;p&gt;One popular feature of search is the ability to highlight matching sections of a document in the search results.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Requirements&lt;/strong&gt;
* The field you want to highlight matches in must be both &lt;strong&gt;Stored&lt;/strong&gt; and &lt;strong&gt;IncludeTermVectors&lt;/strong&gt;.  It must be stored so that we have access to the original content to highlight, and it must include term vectors so that we know the byte offsets where each term occurred within the original contnent.&lt;/p&gt;

&lt;p&gt;Consider we already have the following search request:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;    query := bleve.NewQueryStringQuery(...)
    searchRequest := bleve.NewSearchRequest(query)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can highlight results with the default highlighter using:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;    searchRequest.Highlight = bleve.NewHighlight()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or we can request use of a specific named highlighter with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;    searchRequest.Highlight = bleve.NewHighlightWithStyle(highlighterName)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Without any other configuration, it will automatically try to highlight any fields which have matches.  Sometimes we&amp;rsquo;re only interested in highlighting a specific field or set of fields.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;    searchRequest.Highlight.AddField(field)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;highlighters:8a6c01a638330ec98d137a89109c86d0&#34;&gt;Highlighters&lt;/h3&gt;

&lt;h4 id=&#34;html:8a6c01a638330ec98d137a89109c86d0&#34;&gt;HTML&lt;/h4&gt;

&lt;p&gt;The HTML Result Match Highlighter is registered with the name &lt;code&gt;html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;By default it produces output that looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blevesearch.com/img/docs/highlight-html.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;ansi:8a6c01a638330ec98d137a89109c86d0&#34;&gt;ANSI&lt;/h4&gt;

&lt;p&gt;The ANSI Result Match Highlighter is registered with the name &lt;code&gt;ansi&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;By default it produces output that looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blevesearch.com/img/docs/highlight-ansi.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ignore/Disable Sections of Documents</title>
      <link>https://blevesearch.com/docs/Disabling%20Sections%20of%20Documents/</link>
      <pubDate>Tue, 23 Jun 2015 10:25:38 -0400</pubDate>
      
      <guid>https://blevesearch.com/docs/Disabling%20Sections%20of%20Documents/</guid>
      <description>&lt;p&gt;Sometimes documents contains sections of content you simply want to ignore.  Let&amp;rsquo;s imagine we have the following structure:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Person struct {
    Name string
    Addr Address
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And, we&amp;rsquo;ve decided we don&amp;rsquo;t want to index or store any of the address data.  We can accomplish this by using the following DocumentMapping.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;addressMapping := bleve.NewDocumentDisabledMapping()
personMapping := bleve.NewDocumentMapping()
personMapping.AddSubDocumentMapping(&amp;quot;Addr&amp;quot;, addressMapping)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Include Facets in Results</title>
      <link>https://blevesearch.com/docs/Result-Faceting/</link>
      <pubDate>Tue, 23 Jun 2015 10:25:38 -0400</pubDate>
      
      <guid>https://blevesearch.com/docs/Result-Faceting/</guid>
      <description>

&lt;p&gt;Facets allow you to include aggregated information about the documents matching your query.&lt;/p&gt;

&lt;h3 id=&#34;terms-facet:8e50022d01ca401f0717d155b0a98a62&#34;&gt;Terms Facet&lt;/h3&gt;

&lt;p&gt;In the beer-sample dataset each beer is assigned a style.  This would be a common field to produce a facet on since it has low cardinality and can be helpful in refining your search.  To start, each facet requires a name and a size.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;    stylesFacet := bleve.NewFacetRequest(&amp;quot;style&amp;quot;, 3)
    searchRequest.AddFacet(&amp;quot;styles&amp;quot;, stylesFacet)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we have named the facet &lt;code&gt;styles&lt;/code&gt; and requested the result to include the top 3 categories or buckets in the facet.  We have set the field to &lt;code&gt;style&lt;/code&gt; which corresponds to the name we used when mapping the data.&lt;/p&gt;

&lt;p&gt;Without providing any other configuration options this will produce what is known as a Terms Facet.  That means each term indexed for this field is treated as a unique bucket.  For each result document, we include the document in the appropriate bucket, as determined by the configured field.  (For the results to make the most sense, this type of facet is normally used for fields indexed as a single term)&lt;/p&gt;

&lt;h3 id=&#34;numeric-range-facet:8e50022d01ca401f0717d155b0a98a62&#34;&gt;Numeric Range Facet&lt;/h3&gt;

&lt;p&gt;In the beer-sample dataset each beer has a numeric &lt;code&gt;abv&lt;/code&gt; or alcohol by volume field.  With numeric range facets we can defined buckets to be bounded by numeric ranges.  In this example we define 3 buckets which cover all numeric values, corresponding to low, medium, and high alcohol content.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;    var lowToMidAbv = 3.5
    var midToHighAbv = 9.0
    abvFacet := bleve.NewFacetRequest(&amp;quot;abv&amp;quot;, 3)
    abvFacet.AddNumericRange(&amp;quot;low&amp;quot;, nil, &amp;amp;lowToMidAbv)
    abvFacet.AddNumericRange(&amp;quot;medium&amp;quot;, &amp;amp;lowToMidAbv, &amp;amp;midToHighAbv)
    abvFacet.AddNumericRange(&amp;quot;high&amp;quot;, &amp;amp;midToHighAbv, nil)
    searchRequest.AddFacet(&amp;quot;abv&amp;quot;, abvFacet)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;datetime-range-facet:8e50022d01ca401f0717d155b0a98a62&#34;&gt;DateTime Range Facet&lt;/h3&gt;

&lt;p&gt;In the beer-sample dataset each beer and brewery has a date &lt;code&gt;updated&lt;/code&gt; describing when the document was updated.  With date range facets we can defined buckets to be bounded by date ranges.  In this example we define 2 buckets which cover all date values, corresponding to those updated this year, and those updated prior to that.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;    var cutOffDate = time.Now().Add(-365*24*time.Hour)
    updatedFacet := bleve.NewFacetRequest(&amp;quot;updated&amp;quot;, 2)
    updatedFacet.AddDateTimeRange(&amp;quot;old&amp;quot;, time.Unix(0, 0), cutOffDate)
    updatedFacet.AddDateTimeRange(&amp;quot;new&amp;quot;, cutOffDate, time.Unix(999999999, 999999999))
    searchRequest.AddFacet(&amp;quot;updated&amp;quot;, updatedFacet)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;facet-results:8e50022d01ca401f0717d155b0a98a62&#34;&gt;Facet Results&lt;/h3&gt;

&lt;p&gt;For each facet you build, a FacetResult is returned containing the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Field - the name of the field the facet was built on&lt;/li&gt;
&lt;li&gt;Total - the total number of values encountered (if each document had one term, this should match the total number of documents in the search result)&lt;/li&gt;
&lt;li&gt;Missing - the number of documents which do not have any value for this field&lt;/li&gt;
&lt;li&gt;Other - the number of documents for which a value exists, but it was not in the top N number of facet buckets requested&lt;/li&gt;
&lt;li&gt;Array of Facets - each Facet contains the count indicating the number of items in this facet range/bucket

&lt;ul&gt;
&lt;li&gt;Term - Terms Facets include the name of the term&lt;/li&gt;
&lt;li&gt;Numeric Range - Numeric Range Facets include the range for this bucket&lt;/li&gt;
&lt;li&gt;DateTime Range - DateTime Range Facets include the datetime range for this bucket&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>